package stringsprint

// FirstUniqueCharIndex находит индекс первого неповторяющегося символа в строке.
//
// Задача:
//
//	Найти индекс первого символа, который встречается в строке только один раз.
//	Если такого символа нет, вернуть -1.
//
// Сигнатура функции:
//
//	func FirstUniqueCharIndex(s string) int
//
// Вход:
//   - s string: входная строка для анализа
//
// Выход:
//   - int: индекс первого уникального символа, или -1 если такого нет
//
// Примеры:
//
//	FirstUniqueCharIndex("leetcode") → 0 (символ 'l' встречается только один раз)
//	FirstUniqueCharIndex("loveleetcode") → 2 (символ 'v' - первый уникальный)
//	FirstUniqueCharIndex("aabb") → -1 (все символы повторяются)
//	FirstUniqueCharIndex("") → -1 (пустая строка)
//	FirstUniqueCharIndex("a") → 0 (единственный символ уникален)
//	FirstUniqueCharIndex("abccba") → -1 (все символы повторяются)
//
// Ограничения:
//   - Строка состоит только из строчных английских букв
//   - Длина строки может быть от 0 до 10^5
//   - Временная сложность: O(n), где n - длина строки
//   - Пространственная сложность: O(1) (максимум 26 букв в алфавите)
//
// Особенности:
//   - Нужно два прохода: первый для подсчета частот, второй для поиска первого уникального
//   - Используйте map или массив для подсчета символов
//   - Обработайте пустую строку
//   - Возвращайте индекс в байтах (для ASCII это совпадает с позицией символа)
//
// Идиоматичный Go:
//   - Используйте map[rune]int для подсчета частот
//   - Или массив [26]int для английских букв (более эффективно)
//   - Итерируйтесь по строке с помощью range для корректной работы с Unicode
func FirstUniqueCharIndex(s string) int {
	// TODO: Реализуйте функцию
	return -1
}
