package slice

// MergeSorted объединяет два отсортированных слайса в один отсортированный слайс.
//
// Задача:
//
//	Объединить два отсортированных по возрастанию слайса в один отсортированный
//	слайс, сохраняя порядок сортировки. Это классический шаг алгоритма сортировки слиянием.
//
// Сигнатура функции:
//
//	func MergeSorted(a, b []int) []int
//
// Вход:
//   - a []int: первый отсортированный слайс (по возрастанию)
//   - b []int: второй отсортированный слайс (по возрастанию)
//
// Выход:
//   - []int: новый отсортированный слайс, содержащий все элементы из a и b
//
// Примеры:
//
//	MergeSorted([]int{1, 3, 5}, []int{2, 4, 6}) → []int{1, 2, 3, 4, 5, 6}
//	MergeSorted([]int{1, 2, 3}, []int{4, 5, 6}) → []int{1, 2, 3, 4, 5, 6}
//	MergeSorted([]int{}, []int{1, 2, 3}) → []int{1, 2, 3}
//	MergeSorted([]int{1, 1, 2}, []int{1, 3, 3}) → []int{1, 1, 1, 2, 3, 3}
//	MergeSorted([]int{-2, 0, 3}, []int{-1, 1, 4}) → []int{-2, -1, 0, 1, 3, 4}
//
// Ограничения:
//   - Оба входных слайса уже отсортированы по возрастанию
//   - Слайсы могут содержать дубликаты
//   - Один или оба слайса могут быть пустыми
//   - Временная сложность: O(n + m), где n и m - длины слайсов
//   - Пространственная сложность: O(n + m) для результирующего слайса
//
// Особенности:
//   - Используйте технику "два указателя"
//   - Сравнивайте элементы и добавляйте меньший в результат
//   - После завершения одного слайса, добавьте оставшиеся элементы другого
//   - Обработайте случаи с пустыми слайсами
//
// Идиоматичный Go:
//   - Создайте результирующий слайс нужной длины заранее
//   - Используйте append для добавления оставшихся элементов
//   - Обработайте граничные случаи в начале функции
func MergeSorted(a, b []int) []int {
	// TODO: Реализуйте функцию
	return nil
}
